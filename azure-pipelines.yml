trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  project-name-dev: 'abb-quote-dev'
  project-name-uat: 'abb-quote-uat'
  image-name: 'kevin-dotnet'

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: BuildAndPushJob
    displayName: Build and Push Job
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
#        buildArguments: FEED_ACCESSTOKEN=$(FEED_ACCESSTOKEN)
        command: 'build'
        Dockerfile: 'Dockerfile'
        buildContext: 'App'
        repository: '$(project-name-dev)/$(image-name)'
    - task: ECRPushImage@1
      name: ECRPushImageLatest
      displayName: 'Push latest tag to AWS ECR'
      inputs:
        awsCredentials: 'kechung AWS ECR'
        regionName: 'us-east-1'
        sourceImageName: '$(project-name-dev)/$(image-name)'
        sourceImageTag: $(Build.BuildId)
        repositoryName: '$(project-name-dev)/$(image-name)'
        pushTag: 'latest'
        autoCreateRepository: true
    - task: ECRPushImage@1
      name: ECRPushImageTag
      displayName: 'Push unique tag to AWS ECR'
      inputs:
        awsCredentials: 'kechung AWS ECR'
        regionName: 'us-east-1'
        sourceImageName: '$(project-name-dev)/$(image-name)'
        sourceImageTag: $(Build.BuildId)
        repositoryName: '$(project-name-dev)/$(image-name)'
        pushTag: '$(Build.BuildId)'
        outputVariable: 'ecr-image'
        autoCreateRepository: true
    - task: PublishPipelineArtifact@1
      displayName: Publish pipeline artifacts
      inputs:
        targetPath: '$(Build.SourcesDirectory)/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'
    - task: PowerShell@2
      displayName: Save variables for future stages
      name: SaveVars
      inputs:
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=ecr-image;isOutput=true]$(ecr-image)"

- stage: Deploy
  displayName: Deploy to DEV
  dependsOn: Build
  condition: succeeded()
  variables:
    ecr-image: $[ stageDependencies.Build.BuildAndPushJob.outputs['SaveVars.ecr-image'] ]
  jobs:
  - job: DeployDevJob
    displayName: Deploy to DEV Job
    steps:
    - task: KubernetesManifest@0
      displayName: Deploy to Kubernetes cluster
      inputs:
        action: deploy
        kubernetesServiceConnection: 'kechung ROSA k8s cluster'
        namespace: '$(project-name-dev)'
        manifests: |
          $(Build.SourcesDirectory)/manifests/kevin-dotnet.deployment.yaml
        containers: '$(ecr-image)'
